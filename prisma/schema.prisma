generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(uuid()) @map("_id")
  name             String?
  email            String?   @unique
  emailVerified    DateTime?
  password         String?
  stripeCustomerId String?   @unique
  role             UserRole

  subscriptionPeriodStart DateTime?
  subscriptionPeriodEnd   DateTime?
  subscriptionId          String?
  subscription            Subscription? @relation(fields: [subscriptionId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  ADMIN
  USER
}

model EmailTemplate {
  id          String  @id @map("_id")
  name        String
  code        String?
  description String?
  key         String?
}

model SchoolClass {
  id          String            @id @default(uuid()) @map("_id")
  name        String
  slug        String
  description String?
  createdAt   DateTime          @default(now())
  status      SchoolClassStatus

  tutorials SchoolTutorial[] @relation
  schoolTasks SchoolTask[] @relation
}

enum SchoolClassStatus {
  ACTIVE
  DRAFT
}

model Subscription {
  id             String             @id @default(uuid()) @map("_id")
  name           String
  originalPrice  Float              @map("original_price")
  sellingPrice   Float?             @map("selling_price")
  description    String?
  durationInDays Int?
  status         SubscriptionStatus
  stripePriceId  String?
  createdAt      DateTime           @default(now())
  users          User[]             @relation
}

enum SubscriptionStatus {
  ACTIVE
  DRAFT
}

model SchoolTutorial {
  id        String         @id @default(uuid()) @map("_id")
  name      String
  slug      String
  status    TutorialStatus
  createdAt DateTime       @default(now())

  schoolClassId String
  schoolClass   SchoolClass @relation(fields: [schoolClassId], references: [id], onDelete: Cascade)

  schoolTasks SchoolTask[] @relation
}

enum TutorialStatus {
  ACTIVE
  DRAFT
}

// Tasks model

model SchoolTask {
  id        String     @id @default(uuid()) @map("_id")
  name      String
  slug      String
  status    TaskStatus
  createdAt DateTime   @default(now())

  schoolTutorialId String
  schoolTutorial   SchoolTutorial @relation(fields: [schoolTutorialId], references: [id], onDelete: Cascade)

  schoolClassId String
  schoolClass   SchoolClass @relation(fields: [schoolClassId], references: [id], onDelete: Cascade)

  variants SchoolTaskVariant[]
}

enum TaskStatus {
  ACTIVE
  DRAFT
}

model SchoolTaskVariant {
  id          String            @id @default(uuid()) @map("_id")
  question    String
  explanation String?
  solution    String?
  status      TaskVariantStatus

  createdAt DateTime @default(now())

  schoolTaskId String
  schoolTask   SchoolTask @relation(fields: [schoolTaskId], references: [id], onDelete: Cascade)

  options SchoolTaskOption[]
}

enum TaskVariantStatus {
  ACTIVE
  DRAFT
}

model SchoolTaskOption {
  id        String  @id @default(uuid()) @map("_id")
  option    String
  isCorrect Boolean

  schoolTaskVariantId String
  schoolTaskVariant   SchoolTaskVariant @relation(fields: [schoolTaskVariantId], references: [id], onDelete: Cascade)
}